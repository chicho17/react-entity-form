{"version":3,"sources":["../../src/builders/LayoutsBuilder.ts","../../src/builders/LayoutBuilder.ts","../../src/builders/RowBuilder.ts","../../src/builders/ColumnBuilder.ts","../../src/builders/FieldBuilder.ts","../../src/components/helper.ts","../../src/components/Row.tsx","../../src/components/Layout.tsx","../../src/components/Form.tsx","../../src/hooks/useForm.ts","../../src/actionTypes.ts","../../src/hooks/useFormField.ts","examples/Basic.tsx","App.js","index.js"],"names":["LayoutsBuilder","layouts","layoutsArr","layoutIdToArrIndex","this","Map","layout","addLayout","concat","length","removeLayout","layoutIndex","get","slice","updateLayout","build","idGenerator","id","makeIdGenerator","LayoutBuilder","rows","isHidden","additional","markHidden","markVisible","setAdditional","addRow","RowBuilder","columns","row","addColumn","ColumnBuilder","column","Null","FieldBuilder","FieldComponent","componentProps","field","setFieldComponent","setComponentProps","fieldId","getUnitId","unit","makeGetter","fieldIds","getFieldIds","lookFor","item","createSelector","_property","items","res","getSelectorsAndUnits","unitList","unitId","valuesGetter","fieldsGetter","errorsGetter","selectors","units","makeMetaSelector","prevSelectors","prevUnits","changedUnitList","unChangedUnitList","addedUnitList","unChangedUnitIds","_pick","Row","values","errors","fields","onAction","className","unitKey","getMetaSelector","useRef","columnToGetters","useMemo","value","error","s","colId","col","key","Layout","rowToGetters","React","rowId","Form","handleSubmission","useCallback","e","layoutToGetters","onSubmit","reduceFormChangeAction","state","action","reducer","loading","payload","submitCount","touched","EMPTY_OBJ","useForm","initialValues","initialErrors","initialLayouts","initialFields","validate","reduceChanges","shouldScrollToErrors","shoudlValidateOnBlur","useReducer","dispatch","restState","fieldIdToEl","shouldValidateOnBlurRef","onSubmitRef","onActionRef","reduceChangesRef","validateRef","stateRef","validationPromise","scrollToError","errorFieldId","_keys","fieldElement","handleValidation","errorsPromise","Promise","type","onErrorsFetch","handleSubmit","handleAction","reset","nextState","useEffect","touchedFieldIds","useFormField","fieldIdRef","onChange","onBlur","current","el","TextInput","label","ref","onValueChange","target","htmlFor","placeholder","FIELDS","firstname","lastname","tagline","lifeMoto","address1","address2","pincode","LAYOUTS","BasicForm","App","ReactDOM","render","document","getElementById"],"mappings":"yRAEMA,aAIJ,mBAAYC,UAA6B,IAHzC,KAAAC,WAAA,GACA,KAAAC,mBAAqB,IAArB,IAGEC,KAAA,aACAA,KAAA,mBAA0B,IAAIC,IAAIJ,EAAA,KAAY,oBAAmB,CAACK,EAAD,GAAnB,O,2BAGhDC,sBAGE,OAFAH,KAAA,WAAkBA,KAAKF,WAAWM,OAAO,CAAzC,IACAJ,KAAA,uBAA4BE,EAA5B,GAAuCF,KAAKF,WAAWO,OAAvD,GACA,M,EAGFC,yBACE,IAAMC,EAAcP,KAAKD,mBAAmBS,IAA5C,GACA,aAAID,IAGJP,KAAA,qBAAsBA,KAAKF,WAAWW,MAAM,EAA5C,GAAgET,KAAKF,WAAWW,MAAMF,EAAtF,IACAP,KAAA,8BAHE,M,EAOJU,yBACE,IAAMH,EAAcP,KAAKD,mBAAmBS,IAAIN,EAAhD,IACA,aAAIK,IAGJP,KAAA,qBAAsBA,KAAKF,WAAWW,MAAM,EAA5C,OAAwET,KAAKF,WAAWW,MAAMF,EAA9F,KAFE,M,EAMJI,iBACE,OAAOX,KAAP,Y,EAnCEJ,GCON,IAAMgB,EAPN,WACE,IAAIC,EAAJ,EACA,OAAO,WACL,SAAUA,KAIMC,GAEdC,aAMJ,cALA,KAAAC,KAAA,GACA,KAAAH,GAAKD,IACL,KAAAK,UAAA,EACA,KAAAC,gBAAA,EAGE,IACElB,KAAA,KAAYE,EAAZ,KACAF,KAAA,GAAUE,EAAV,GACAF,KAAA,SAAgBE,EAAhB,SACAF,KAAA,WAAkBE,EAAlB,Y,2BAIJiB,sBAEE,OADAnB,KAAA,YACA,M,EAGFoB,uBAEE,OADApB,KAAA,YACA,M,EAGFqB,0BAEE,OADArB,KAAA,aACA,M,EAGFsB,mBAEE,OADAtB,KAAA,KAAYA,KAAKgB,KAAKZ,OAAO,CAA7B,IACA,M,EAGFO,iBACE,MAAO,CACLK,KAAMhB,KADD,KAELa,GAAIb,KAFC,GAGLiB,SAAUjB,KAHL,SAILkB,WAAYlB,KAAKkB,a,EAxCjBH,GCFN,IAAMH,EAPN,WACE,IAAIC,EAAJ,EACA,OAAO,WACL,SAAUA,KAIMC,GAEdS,aAMJ,cAOE,OAZF,KAAAC,QAAA,GACA,KAAAX,GAAKD,IACL,KAAAK,UAAA,EACA,KAAAC,gBAAA,EAGE,IACElB,KAAA,QAAeyB,EAAf,QACAzB,KAAA,GAAUyB,EAAV,GACAzB,KAAA,SAAgByB,EAAhB,SACAzB,KAAA,WAAkByB,EAAlB,YAEF,K,2BAGFN,sBAEE,OADAnB,KAAA,YACA,M,EAGFoB,uBAEE,OADApB,KAAA,YACA,M,EAGFqB,0BAEE,OADArB,KAAA,aACA,M,EAGF0B,sBAEE,OADA1B,KAAA,QAAeA,KAAKwB,QAAQpB,OAAO,CAAnC,IACA,M,EAGFO,iBACE,MAAO,CACLE,GAAIb,KADC,GAELwB,QAASxB,KAFJ,QAGLiB,SAAUjB,KAHL,SAILkB,WAAYlB,KAAKkB,a,EAzCjBK,GCFN,IAAMX,EAPN,WACE,IAAIC,EAAJ,EACA,OAAO,WACL,SAAUA,KAIMC,GAEda,aAMJ,cAOE,OAZF,KAAAX,KAAA,GACA,KAAAH,GAAKD,IACL,KAAAK,UAAA,EACA,KAAAC,gBAAA,EAGE,IACElB,KAAA,KAAY4B,EAAZ,KACA5B,KAAA,GAAU4B,EAAV,GACA5B,KAAA,SAAgB4B,EAAhB,SACA5B,KAAA,WAAkB4B,EAAlB,YAEF,K,2BAGFT,sBAEE,OADAnB,KAAA,YACA,M,EAGFoB,uBAEE,OADApB,KAAA,YACA,M,EAGFqB,0BAEE,OADArB,KAAA,aACA,M,EAGFsB,mBAEE,OADAtB,KAAA,KAAYA,KAAKgB,KAAKZ,OAAO,CAA7B,IACA,M,EAGFO,iBACE,MAAO,CACLE,GAAIb,KADC,GAELgB,KAAMhB,KAFD,KAGLiB,SAAUjB,KAHL,SAILkB,WAAYlB,KAAKkB,a,EAzCjBS,GCTN,SAASE,IACP,Y,IAGIC,aAMJ,cALA,KAAAC,eAAA,EACA,KAAAC,eAAA,GAEA,KAAAf,UAAA,EAQE,IACEjB,KAAA,eAAsBiC,EAAtB,eACAjC,KAAA,eAAsBiC,EAAtB,eACAjC,KAAA,SAAgBiC,EAAhB,SACAjC,KAAA,QAAeiC,EAAf,S,2BAIJC,8BACElC,KAAA,kB,EAGFmC,8BACEnC,KAAA,kB,EAGFW,iBAME,MAAO,CACLoB,eAAgB/B,KADX,eAELgC,eAAgBhC,KAFX,eAGLiB,SAAUjB,KAHL,SAILoC,QAASpC,KAAKoC,U,EAtCdN,G,+MCMN,SAASO,EAAUC,GACjB,MAAuB,kBAATA,EAAoBA,EAAOA,EAAzC,GAYF,SAASC,EAAT,KACE,IAAMC,EAVR,SAAgBC,EAAqCH,EAASI,GAC5D,YAD4DA,UAA8B,QAC1F,kBAAWJ,EACF,CAAP,GAEKA,EAAA,YAAsB,kBACX,kBAATK,EAAoBA,EAAOF,EAAYE,EAAMD,qBADzB,WAMZD,CAAYH,EAA7B,GACA,OAAOM,YACLJ,EAAA,KAAa,mBAAqBK,IAArB,OACb,W,2BAAIC,6CACF,OAAOA,EAAA,QAAa,gBAElB,OADAC,EAAIP,EAAJO,MACA,IAFF,OAQN,SAASC,EAAT,KACE,OAAOC,EAAA,QACL,cACE,IAAMC,EAASb,EAAf,GAOA,OANAU,eAAwB,CACtBI,aAAcZ,EAAWD,EADH,GAEtBc,aAAcb,EAAWD,EAFH,GAGtBe,aAAcd,EAAWD,EAAMI,IAEjCK,aACA,IAEF,CAAEO,UAAF,GAAiBC,MAAO,KAkBrB,IAAMC,EAAmB,SAACd,GAC/B,IAAIe,EAAJ,GACIC,EAAJ,GACA,OAAO,YACL,SAAIA,EAAmB,OACQV,EAAqBC,EAD7B,GACbK,EADa,YACFC,EADE,QAIrB,OADAG,IADAD,IAKF,IAAME,EAAkBV,EAAA,QACtB,mBAAUS,EAAUrB,EAAVqB,KAA8BA,EAAUrB,EAAVqB,MAAxC,KAEIE,EAAoBX,EAAA,QACxB,mBAAUS,EAAUrB,EAAVqB,KAA8BA,EAAUrB,EAAVqB,MAAxC,KAEIG,EAAgBZ,EAAA,QAAgB,mBAAWS,EAAUrB,EAArB,O,EACTW,EAAqB,GAAD,eAAzCM,cAAWC,UACbO,EAAmBF,EAAA,KAAsB,mBAAUvB,EAAV,MAU/C,OATAoB,EAAgB,EAAH,GACRM,IAAMN,EADE,GAAbA,GAIAC,EAAY,EAAH,GACJK,IAAML,EADF,GAATA,GAKA,I,4CChFEM,EAAM,SAANA,EAAO,G,IAAEC,WAAQC,WAAQC,WAAQ1C,QAAK2C,a,IAAUC,qBAAYA,EAAA,K,IAAIC,mBAAUA,EAAA,YACxEC,EAAkBC,iBAAOhB,EAAiBc,qBAAhD,YACMhC,EAAOb,EAAb,GACMgD,EAAkBC,mBAAQ,WAC9B,OAAOpC,WAAoBiC,UAA3B,KACC,CAFH,IAIA,qBAAW9C,EAAkB,CAC3B,GAAI0C,KAAJ,SACE,YAGF,IAAMlC,EAAQkC,EAAd,GACMQ,EAAQV,EAAd,GACMW,EAAQV,EAAd,GACQnC,EAA4CE,EARzB,eAQHD,EAA4BC,EARzB,eAQaG,EAAYH,EARzB,QAU3B,OACE,qCACMD,GACJoC,SAAUA,EACVC,UAAWA,EACXM,MAAOA,EACPC,MAAOA,EACPxC,QAASA,KAKf,OACE,yBAAKiC,UAAcQ,EAAL,KAAeP,cAAwBO,EAAYA,GAAnD,KAAgER,GAAhE,KACX/B,EAAA,KAAS,YACR,IAAMwC,EAAuB,kBAARC,EAAmBA,EAAMA,EAA9C,GACA,OACE,qBACEC,IAAKF,EACLrD,IAAKsD,EACLd,OAAQQ,qBACRP,OAAQO,qBACRN,OAAQM,qBACRH,QAASA,qBAAiC,OAC1CF,SAAUA,EACVC,UAAWQ,SC5CjBI,EAAS,SAAC,G,IAAEhB,WAAQC,WAAQC,WAAQjE,WAAQkE,aAC1CG,EAAkBC,iBAAOhB,EAA/B,YACM0B,EAAeR,mBAAQ,WAC3B,OAAOH,UAAwBrE,EAA/B,QACC,CAACA,EAFJ,OAIA,OACE,kBAACiF,IAAD,cACGjF,EAAA,UAAgB,YACf,IAAMkF,EAAuB,kBAAR3D,EAAmBA,EAAMA,EAA9C,GACA,OACE,qBACEuD,IAAKI,EACL3D,IAAKA,EACL0C,OAAQe,qBACRjB,OAAQiB,qBACRhB,OAAQgB,qBACRd,SAAUA,SCjBhBiB,EAAO,SAAC,G,IAAEpB,WAAQC,WAAQC,WAAQtE,YAASuE,aACzCkB,EAAmBC,uBAAY,YACnCC,qBADF,IAIMjB,EAAkBC,iBAAOhB,EAA/B,SACMiC,EAAkBf,mBAAQ,WAC9B,OAAOH,UAAP,KACC,CAFH,IAIA,OACE,0BAAMmB,SAAUJ,GACbzF,EAAA,KAAY,mBACX,qBACEmF,IAAK9E,EAAOW,GACZX,OAAQA,EACRiE,OAAQsB,EAAgBvF,EAAhBuF,oBACRxB,OAAQwB,EAAgBvF,EAAhBuF,oBACRvB,OAAQuB,EAAgBvF,EAAhBuF,oBACRrB,SAAUA,SC5BpB,SAASuB,EAAuBC,EAAOC,G,MACrC,eAEE5B,OAAQ,EAAF,GACD2B,EADC,eAEHC,UAFG,SAEsBA,UAFtB,YAOV,SAASC,EAAQF,EAAOC,GACtB,OAAQA,EAAR,MACE,IClBG,gBDmBD,OAAOF,EAAuBC,EAA9B,GACF,YACE,cAAsBC,EAAtB,SAEF,kBACE,eAEEE,QAASF,EAAOG,UAGpB,aACE,eAEED,SAFF,EAGE7B,OAAQ2B,UAHV,OAIEI,YAAaL,cAAoB,IAGrC,oBACE,eAEE1B,OAAQ2B,EAAOG,UAGnB,ICzCG,qBDyCkC,MACnC,eAEEE,QAAS,EAAF,GACFN,EADE,gBAEJC,UAFI,kBAMX,QACE,UAIN,IAAMM,EAAN,GAEMC,EAAU,SAAC,G,IACfC,kBACAC,kBACAC,mBACAC,kBACAd,aACAtB,aACAqC,aACAC,kBACAC,yBACAC,yB,EAE0BC,qBAAWf,EAAS,CAC5C7B,OAD4C,EAE5CC,OAF4C,EAG5CrE,QAH4C,EAI5CsE,OAJ4C,EAK5C+B,QAL4C,GAM5CD,YAAa,IANRL,OAAOkB,OAQNb,EAA8BL,EAA9BK,YAAgBc,E,oIAAAA,CAAcnB,mBAChCoB,EAAcxC,iBAApB,IACMyC,EAA0BzC,iBAAhC,GACM0C,EAAc1C,iBAApB,GACM2C,EAAc3C,iBAApB,GACM4C,EAAmB5C,iBAAzB,GACM6C,EAAc7C,iBAApB,GACM8C,EAAW9C,iBAAjB,GACAyC,YACAC,YACAC,YACAC,YACAE,YACAD,YAEA,IAAME,EAAoB/C,iBAA1B,MAEMgD,EAAgBjC,uBAAY,iBAACrB,UAASoD,UAAiBpD,QAC3D,IAAMuD,EAAeC,OAArB,GACMC,EAAeX,UAArB,GACIW,GAAgBA,EAApB,gBACEA,qBAJJ,IAQMC,EAAmBrC,uBAAY,YAC/BgC,EAAJ,UACEA,qBAEF,IAAMM,EAAiBC,gBAAgBT,UAAoBC,EAA3D,UAGAC,YACAT,EAAS,CAAEiB,KAAF,cAAuB/B,SAAS,IACzC6B,QACQ,YACAA,EAAJ,QAGAG,QALJH,OAOS,WACDA,EAAJ,QAGAf,EAAS,CAAEiB,KAAF,cAAuB/B,SAAS,SApB/C,IAwBMiC,EAAe1C,uBAAY,WAC3B8B,EAAJ,SACEO,GAAiB,YACf,GACEd,EAAS,CAAEiB,KAAF,SAAkB/B,QAAS,CAAE9B,YACtC,GACEsD,OAGFV,EAAS,CAAEiB,KAAF,SAAkB/B,QAAS,CAAE9B,OAAQ,MAC9CwB,WAVR,IAeMwC,EAAe3C,uBAAY,YAC/B,OAAQM,EAAR,MACE,ICjJC,gBDmJGiB,EADF,EACW,CACPiB,KADO,QAEP/B,QAASoB,UACPE,EADOF,QAEPzB,EAAuB2B,EAAD,QAFfF,OAOXN,GAEF,MAEF,IC9JC,qBD+JCA,KACA,MAEF,ICnKC,wBDoKCE,UAAoBnB,UAApBmB,SAA8CnB,UAA9CmB,GACA,MAEF,QACE,OAAOG,UAAP,MA1BN,IA8BMgB,EAAQ5C,uBAAY,YACxBuB,EAAS,CACPiB,KADO,QAEP/B,QAASoC,MAHb,IAqBA,OAdAC,qBAAU,WACR,GAAIhB,EAAJ,QAAyB,CACvB,IAAMiB,EAAkBZ,IAAMJ,UAA9B,UACIrB,GAAgBqC,UAA0BrB,EAA9C,UACEW,GAAiB,YACfd,EAAS,CACPiB,KADO,gBAEP/B,QAASC,EAAc/B,GAAH,EAAyBH,IAAMG,EAAQoE,WAKlE,CAACvB,EAAD,OAAmBA,EAAnB,QAZHsB,IAcA,QAAuBJ,aAAvB,EAAqCC,aAArC,EAAmDV,cAAnD,EAAkEW,WE/L9DI,EAAe,SAACnG,EAASgC,GAC7B,IAAMoE,EAAahE,iBAAnB,GACM2C,EAAc3C,iBAApB,GACAgE,YACArB,YAEA,IAAMsB,EAAWlD,uBAAY,YAC3B4B,UAAoB,CAClBY,KDXC,gBCYD/B,QAAS,CAAE5D,QAASoG,EAAX,QAA+B7D,aAH5C,IAOM+D,EAASnD,uBAAY,WACzB4B,UAAoB,CAClBY,KDhBC,qBCiBD/B,QAAS,CAAE5D,QAASoG,EAAWG,aAHnC,IAcA,MAAO,CAPKpD,uBAAY,YACtB4B,UAAoB,CAClBY,KDxBC,wBCyBD/B,QAAS,CAAE5D,QAASoG,EAAX,QAA+BI,UAH5C,IAOaF,EAAb,ICLIG,EAAY,YAA+F,IAAD,IAAzElE,aAAyE,MAAjE,GAAiE,EAA7DP,EAA6D,EAA7DA,SAAUC,EAAmD,EAAnDA,UAAWjC,EAAwC,EAAxCA,QAAS0G,EAA+B,EAA/BA,MAA+B,EACzEP,EAAanG,EAASgC,GADmD,mBACvG2E,EADuG,KAClGL,EADkG,KAC1FM,EAD0F,KAExGP,EAAWlD,uBACf,SAACC,GACCwD,EAAcxD,EAAEyD,OAAOtE,SAEzB,CAACqE,IAGH,OACE,yBAAK3E,UAAS,UAAKA,GAAa,GAAlB,kBAAsC0E,IAAKA,GACvD,2BAAO1E,UAAU,kBAAkB6E,QAAS9G,GACzC0G,GAEH,2BACEJ,OAAQA,EACR7H,GAAIuB,EACJ+G,YAAaL,EACbzE,UAAU,sBACV0D,KAAK,OACLpD,MAAOA,EACP8D,SAAUA,MAgDlB,IAAMW,EAAiB,CACrBC,UAAW,IAAIvH,EAA+D,CAC5EM,QAAS,YACTnB,UAAU,EACVe,eAAgB,CAAEqC,UAAW,GAAIyE,MAAO,cACxC/G,eAAgB8G,IACflI,QACH2I,SAAU,IAAIxH,EAA6D,CACzEM,QAAS,WACTnB,UAAU,EACVe,eAAgB,CAAEqC,UAAW,GAAIyE,MAAO,aACxC/G,eAAgB8G,IACflI,QACH4I,QAAS,IAAIzH,EAA2D,CACtEM,QAAS,UACTnB,UAAU,EACVe,eAAgB,CAAEqC,UAAW,GAAIyE,MAAO,WACxC/G,eAAgB8G,IACflI,QACH6I,SAAU,IAAI1H,EAAiE,CAC7EM,QAAS,WACTnB,UAAU,EACVe,eAAgB,CAAEqC,UAAW,GAAIyE,MAAO,aACxC/G,eAxDJ,YAM+C,IAAD,IAL5C4C,aAK4C,MALpC,GAKoC,EAJ5CP,EAI4C,EAJ5CA,SACAC,EAG4C,EAH5CA,UACAjC,EAE4C,EAF5CA,QACA0G,EAC4C,EAD5CA,MAC4C,EACPP,EAAanG,EAASgC,GADf,mBACrC2E,EADqC,KAChCL,EADgC,KACxBM,EADwB,KAEtCP,EAAWlD,uBACf,SAACC,GACCwD,EAAcxD,EAAEyD,OAAOtE,SAEzB,CAACqE,IAGH,OACE,yBAAKD,IAAKA,EAAK1E,UAAS,UAAKA,GAAa,GAAlB,mBACtB,2BAAOA,UAAU,kBAAkB6E,QAAS9G,GACzC0G,GAEH,8BACEJ,OAAQA,EACR7H,GAAIuB,EACJ+G,YAAaL,EACbzE,UAAU,sBACVM,MAAOA,EACP8D,SAAUA,EACVzH,KAAM,QA8BTL,QACH8I,SAAU,IAAI3H,EAA6D,CACzEM,QAAS,WACTnB,UAAU,EACVe,eAAgB,CAAEqC,UAAW,GAAIyE,MAAO,kBACxC/G,eAAgB8G,IACflI,QACH+I,SAAU,IAAI5H,EAA6D,CACzEM,QAAS,WACTnB,UAAU,EACVe,eAAgB,CAAEqC,UAAW,GAAIyE,MAAO,kBACxC/G,eAAgB8G,IACflI,QACHgJ,QAAS,IAAI7H,EAA2D,CACtEM,QAAS,UACTnB,UAAU,EACVe,eAAgB,CAAEqC,UAAW,GAAIyE,MAAO,WACxC/G,eAAgB8G,IACflI,SAGCiJ,GAA6B,IAAIhK,GACpCO,WACC,IAAIY,GACDO,QACC,IAAIC,GACDG,UAAU,aACVA,UAAU,YACVf,SAEJW,OAAO,WACPA,QACC,IAAIC,GACDG,UAAU,YACVA,WACC,IAAIC,GACDL,OAAO,YACPA,OAAO,YACPA,OAAO,WACPX,SAEJA,SAEJA,SAEJA,QAEGkJ,EAAY,WAAM,MAE4BzD,EAAQ,CACxDE,cAAe,GACfD,cAAe,KAFT6B,EAFc,EAEdA,aAAchE,EAFA,EAEAA,OAAQD,EAFR,EAEQA,OAFR,EAEgBiC,QAKtC,OAAO,kBAAC,EAAD,CAAM/B,OAAQiF,EAAQvJ,QAAS+J,EAAS3F,OAAQA,EAAQC,OAAQA,EAAQE,SAAU8D,KC9J5E4B,G,OATH,WACV,OACE,yBAAKzF,UAAU,OACb,uDACA,kBAAC,EAAD,SCHN0F,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.0f882519.chunk.js","sourcesContent":["import { LayoutInterface } from '../types';\n\nclass LayoutsBuilder {\n  layoutsArr: LayoutInterface[] = [];\n  layoutIdToArrIndex = new Map<string, number>();\n\n  constructor(layouts: LayoutInterface[] = []) {\n    this.layoutsArr = layouts;\n    this.layoutIdToArrIndex = new Map(layouts.map((layout, index) => [layout.id, index]));\n  }\n\n  addLayout(layout: LayoutInterface) {\n    this.layoutsArr = this.layoutsArr.concat([layout]);\n    this.layoutIdToArrIndex.set(layout.id, this.layoutsArr.length - 1);\n    return this;\n  }\n\n  removeLayout(layoutId: LayoutInterface['id']) {\n    const layoutIndex = this.layoutIdToArrIndex.get(layoutId);\n    if (layoutIndex == null) {\n      return this;\n    }\n    this.layoutsArr = [...this.layoutsArr.slice(0, layoutIndex), ...this.layoutsArr.slice(layoutIndex + 1)];\n    this.layoutIdToArrIndex.delete(layoutId);\n    return this;\n  }\n\n  updateLayout(layout: LayoutInterface) {\n    const layoutIndex = this.layoutIdToArrIndex.get(layout.id);\n    if (layoutIndex == null) {\n      return this;\n    }\n    this.layoutsArr = [...this.layoutsArr.slice(0, layoutIndex), layout, ...this.layoutsArr.slice(layoutIndex + 1)];\n    return this;\n  }\n\n  build(): LayoutInterface[] {\n    return this.layoutsArr;\n  }\n}\n\nexport { LayoutsBuilder };\n","import { RowInterface, LayoutInterface } from '../types';\n\nfunction makeIdGenerator() {\n  let id = 1;\n  return function generateId() {\n    return `${id++}`;\n  };\n}\n\nconst idGenerator = makeIdGenerator();\n\nclass LayoutBuilder {\n  rows: RowInterface[] = [];\n  id = idGenerator();\n  isHidden = false;\n  additional: any = undefined;\n\n  constructor(layout?: LayoutInterface) {\n    if (layout) {\n      this.rows = layout.rows;\n      this.id = layout.id;\n      this.isHidden = layout.isHidden;\n      this.additional = layout.additional;\n    }\n  }\n\n  markHidden() {\n    this.isHidden = true;\n    return this;\n  }\n\n  markVisible() {\n    this.isHidden = false;\n    return this;\n  }\n\n  setAdditional(additional: any) {\n    this.additional = additional;\n    return this;\n  }\n\n  addRow(row: RowInterface) {\n    this.rows = this.rows.concat([row]);\n    return this;\n  }\n\n  build(): LayoutInterface {\n    return {\n      rows: this.rows,\n      id: this.id,\n      isHidden: this.isHidden,\n      additional: this.additional,\n    };\n  }\n}\n\nexport { LayoutBuilder };\n","import { RowObjectInterface, ColumnInterface } from '../types';\n\nfunction makeIdGenerator() {\n  let id = 1;\n  return function generateId() {\n    return `${id++}`;\n  };\n}\n\nconst idGenerator = makeIdGenerator();\n\nclass RowBuilder {\n  columns: ColumnInterface[] = [];\n  id = idGenerator();\n  isHidden = false;\n  additional: any = undefined;\n\n  constructor(row?: RowObjectInterface) {\n    if (row) {\n      this.columns = row.columns;\n      this.id = row.id;\n      this.isHidden = row.isHidden;\n      this.additional = row.additional;\n    }\n    return this;\n  }\n\n  markHidden() {\n    this.isHidden = true;\n    return this;\n  }\n\n  markVisible() {\n    this.isHidden = false;\n    return this;\n  }\n\n  setAdditional(additional: any) {\n    this.additional = additional;\n    return this;\n  }\n\n  addColumn(column: ColumnInterface) {\n    this.columns = this.columns.concat([column]);\n    return this;\n  }\n\n  build(): RowObjectInterface {\n    return {\n      id: this.id,\n      columns: this.columns,\n      isHidden: this.isHidden,\n      additional: this.additional,\n    };\n  }\n}\n\nexport { RowBuilder };\n","import { ColumnObjectInterface, RowInterface } from '../types';\n\nfunction makeIdGenerator() {\n  let id = 1;\n  return function generateId() {\n    return `${id++}`;\n  };\n}\n\nconst idGenerator = makeIdGenerator();\n\nclass ColumnBuilder {\n  rows: RowInterface[] = [];\n  id = idGenerator();\n  isHidden = false;\n  additional: any = undefined;\n\n  constructor(column?: ColumnObjectInterface) {\n    if (column) {\n      this.rows = column.rows;\n      this.id = column.id;\n      this.isHidden = column.isHidden;\n      this.additional = column.additional;\n    }\n    return this;\n  }\n\n  markHidden() {\n    this.isHidden = true;\n    return this;\n  }\n\n  markVisible() {\n    this.isHidden = false;\n    return this;\n  }\n\n  setAdditional(additional: any) {\n    this.additional = additional;\n    return this;\n  }\n\n  addRow(row: RowInterface) {\n    this.rows = this.rows.concat([row]);\n    return this;\n  }\n\n  build(): ColumnObjectInterface {\n    return {\n      id: this.id,\n      rows: this.rows,\n      isHidden: this.isHidden,\n      additional: this.additional,\n    };\n  }\n}\n\nexport { ColumnBuilder };\n","import { FieldComponentProps } from '../types';\n\nfunction Null() {\n  return null;\n}\n\nclass FieldBuilder<V, F, P extends FieldComponentProps<V, F>> {\n  FieldComponent: React.ComponentType<P> = Null;\n  componentProps: Omit<P, 'value' | 'onAction' | 'fieldId'> = {} as P;\n  fieldId: F;\n  isHidden: boolean = false;\n\n  constructor(field?: {\n    FieldComponent: React.ComponentType<P>;\n    componentProps: Omit<P, 'value' | 'onAction' | 'fieldId'>;\n    isHidden: boolean;\n    fieldId: F;\n  }) {\n    if (field) {\n      this.FieldComponent = field.FieldComponent;\n      this.componentProps = field.componentProps;\n      this.isHidden = field.isHidden;\n      this.fieldId = field.fieldId;\n    }\n  }\n\n  setFieldComponent(Component: React.ComponentType<P & { value: V }>) {\n    this.FieldComponent = Component;\n  }\n\n  setComponentProps(componentProps: Omit<P, 'value' | 'onAction' | 'fieldId'>) {\n    this.componentProps = componentProps;\n  }\n\n  build(): {\n    FieldComponent: React.ComponentType<P>;\n    componentProps: Omit<P, 'value' | 'onAction' | 'fieldId'>;\n    isHidden: boolean;\n    fieldId: F;\n  } {\n    return {\n      FieldComponent: this.FieldComponent,\n      componentProps: this.componentProps,\n      isHidden: this.isHidden,\n      fieldId: this.fieldId,\n    };\n  }\n}\n\nexport { FieldBuilder };\n","import { createSelector } from 'reselect';\nimport _property from 'lodash/property';\nimport _pick from 'lodash/pick';\n\nimport { Fields, Values, Errors } from '../types';\n\ninterface UnitItem {\n  id: string;\n}\n\ntype UnitInterface = string | UnitItem;\n\nfunction getUnitId(unit: UnitInterface) {\n  return typeof unit === 'string' ? unit : unit.id;\n}\n\nexport function getFieldIds<U extends UnitInterface>(unit: U, lookFor: 'columns' | 'rows' = 'rows'): string[] {\n  if (typeof unit === 'string') {\n    return [unit];\n  }\n  return unit[lookFor].flatMap((item: UnitInterface) =>\n    typeof item === 'string' ? item : getFieldIds(item, lookFor === 'rows' ? 'columns' : 'rows')\n  );\n}\n\nfunction makeGetter<U extends UnitInterface>(unit: U, lookFor: 'columns' | 'rows') {\n  const fieldIds = getFieldIds(unit, lookFor);\n  return createSelector(\n    fieldIds.map((fieldId: string) => _property<Dict<U>, U>(fieldId)),\n    (...items) => {\n      return items.reduce((res, item, index) => {\n        res[fieldIds[index]] = item;\n        return res;\n      }, {});\n    }\n  );\n}\n\nfunction getSelectorsAndUnits<T extends UnitInterface>(unitList: T[], lookFor: 'columns' | 'rows') {\n  return unitList.reduce(\n    (res, unit) => {\n      const unitId = getUnitId(unit);\n      res.selectors[unitId] = {\n        valuesGetter: makeGetter(unit, lookFor),\n        fieldsGetter: makeGetter(unit, lookFor),\n        errorsGetter: makeGetter(unit, lookFor),\n      };\n      res.units[unitId] = unit;\n      return res;\n    },\n    { selectors: {}, units: {} }\n  );\n}\n\ninterface Dict<T> {\n  [k: string]: T;\n}\n\ninterface Getter<T> {\n  (dict: T): T;\n}\n\ninterface Selectors {\n  valuesGetter: Getter<Values>;\n  fieldsGetter: Getter<Fields>;\n  errorsGetter: Getter<Errors>;\n}\n\nexport const makeMetaSelector = (lookFor: 'columns' | 'rows') => {\n  let prevSelectors: Dict<Selectors> = {};\n  let prevUnits: Dict<unknown> = {};\n  return function getMetaSelectors<T extends UnitInterface>(unitList: T[]) {\n    if (prevUnits == null) {\n      const { selectors, units } = getSelectorsAndUnits(unitList, lookFor);\n      prevSelectors = selectors;\n      prevUnits = units;\n      return prevSelectors;\n    }\n\n    const changedUnitList = unitList.filter(\n      (unit) => prevUnits[getUnitId(unit)] && prevUnits[getUnitId(unit)] !== unit\n    );\n    const unChangedUnitList = unitList.filter(\n      (unit) => prevUnits[getUnitId(unit)] && prevUnits[getUnitId(unit)] === unit\n    );\n    const addedUnitList = unitList.filter((unit) => !prevUnits[getUnitId(unit)]);\n    const { selectors, units } = getSelectorsAndUnits([...changedUnitList, ...addedUnitList], lookFor);\n    const unChangedUnitIds = unChangedUnitList.map((unit) => getUnitId(unit));\n    prevSelectors = {\n      ..._pick(prevSelectors, unChangedUnitIds),\n      ...selectors,\n    };\n    prevUnits = {\n      ..._pick(prevUnits, unChangedUnitIds),\n      ...units,\n    };\n\n    return prevSelectors;\n  };\n};\n","import React, { useRef, useMemo } from 'react';\nimport { makeMetaSelector } from './helper';\n\nimport { RowInterface, ColumnInterface, Values, Errors, Fields, OnActionInterface } from '../types';\n\nimport s from '../styles.module.css';\n\nexport interface RowProps {\n  values: Values;\n  errors: Errors;\n  fields: Fields;\n  row: RowInterface | ColumnInterface;\n  onAction: OnActionInterface<any, string>;\n  className?: string;\n  unitKey?: 'columns' | 'rows';\n}\n\nconst Row = ({ values, errors, fields, row, onAction, className = '', unitKey = 'columns' }: RowProps) => {\n  const getMetaSelector = useRef(makeMetaSelector(unitKey === 'columns' ? 'rows' : 'columns'));\n  const unit = row[unitKey];\n  const columnToGetters = useMemo(() => {\n    return unit == null ? {} : getMetaSelector.current(unit);\n  }, [unit]);\n\n  if (typeof row === 'string') {\n    if (fields[row].isHidden) {\n      return null;\n    }\n\n    const field = fields[row];\n    const value = values[row];\n    const error = errors[row];\n    const { FieldComponent, componentProps, fieldId } = field;\n\n    return (\n      <FieldComponent\n        {...componentProps}\n        onAction={onAction}\n        className={className}\n        value={value}\n        error={error}\n        fieldId={fieldId}\n      />\n    );\n  }\n\n  return (\n    <div className={`${s.flex} ${unitKey === 'columns' ? s.flexRow : s.flexCol} ${className || ''}`}>\n      {unit.map((col: ColumnInterface | RowInterface) => {\n        const colId = typeof col === 'string' ? col : col.id;\n        return (\n          <Row\n            key={colId}\n            row={col}\n            values={columnToGetters[colId].valuesGetter(values)}\n            errors={columnToGetters[colId].errorsGetter(errors)}\n            fields={columnToGetters[colId].fieldsGetter(fields)}\n            unitKey={unitKey === 'rows' ? 'columns' : 'rows'}\n            onAction={onAction}\n            className={s.flex1}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport { Row };\n","import React, { useMemo, useRef } from 'react';\n\nimport { Row } from './Row';\nimport { makeMetaSelector } from './helper';\n\nimport { RowInterface, Values, Errors, Fields, LayoutInterface, OnActionInterface } from '../types';\n\nexport interface LayoutProps {\n  values: Values;\n  errors: Errors;\n  fields: Fields;\n  layout: LayoutInterface;\n  onAction: OnActionInterface<any, string>;\n}\n\nconst Layout = ({ values, errors, fields, layout, onAction }: LayoutProps) => {\n  const getMetaSelector = useRef(makeMetaSelector('columns'));\n  const rowToGetters = useMemo(() => {\n    return getMetaSelector.current(layout.rows);\n  }, [layout.rows]);\n\n  return (\n    <React.Fragment>\n      {layout.rows.map((row: RowInterface) => {\n        const rowId = typeof row === 'string' ? row : row.id;\n        return (\n          <Row\n            key={rowId}\n            row={row}\n            fields={rowToGetters[rowId].fieldsGetter(fields)}\n            values={rowToGetters[rowId].valuesGetter(values)}\n            errors={rowToGetters[rowId].errorsGetter(errors)}\n            onAction={onAction}\n          />\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\nexport { Layout };\n","import React, { useCallback, useMemo, useRef } from 'react';\n\nimport { Layout } from './Layout';\nimport { makeMetaSelector } from './helper';\n\nimport { Errors, Fields, LayoutInterface, OnActionInterface, Values } from '../types';\n\nexport interface FormProps {\n  values: Values;\n  errors: Errors;\n  fields: Fields;\n  layouts: LayoutInterface[];\n  onAction: OnActionInterface<any, string>;\n}\n\nconst Form = ({ values, errors, fields, layouts, onAction }: FormProps) => {\n  const handleSubmission = useCallback((e) => {\n    e.preventDefault();\n  }, []);\n\n  const getMetaSelector = useRef(makeMetaSelector('rows'));\n  const layoutToGetters = useMemo(() => {\n    return getMetaSelector.current(layouts);\n  }, [layouts]);\n\n  return (\n    <form onSubmit={handleSubmission}>\n      {layouts.map((layout) => (\n        <Layout\n          key={layout.id}\n          layout={layout}\n          fields={layoutToGetters[layout.id].fieldsGetter(fields)}\n          values={layoutToGetters[layout.id].valuesGetter(values)}\n          errors={layoutToGetters[layout.id].errorsGetter(errors)}\n          onAction={onAction}\n        />\n      ))}\n    </form>\n  );\n};\n\nexport { Form };\n","import { useCallback, useReducer, useRef, useEffect } from 'react';\nimport _keys from 'lodash/keys';\nimport _pick from 'lodash/pick';\n\nimport { FORM_CHANGE_ACTION, REGISTER_FORM_FIELD_ACTION, MARK_FORM_FIELD_TOUCHED_ACTION } from '../actionTypes';\n\nfunction reduceFormChangeAction(state, action) {\n  return {\n    ...state,\n    values: {\n      ...state.values,\n      [action.payload.fieldId]: action.payload.value,\n    },\n  };\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case FORM_CHANGE_ACTION:\n      return reduceFormChangeAction(state, action);\n    case 'RESET': {\n      return { ...state, ...action.payload };\n    }\n    case 'SET_LOADING': {\n      return {\n        ...state,\n        loading: action.payload,\n      };\n    }\n    case 'SUBMIT': {\n      return {\n        ...state,\n        loading: false,\n        errors: action.payload.errors,\n        submitCount: state.submitCount + 1,\n      };\n    }\n    case 'UPDATE_ERRORS': {\n      return {\n        ...state,\n        errors: action.payload,\n      };\n    }\n    case MARK_FORM_FIELD_TOUCHED_ACTION: {\n      return {\n        ...state,\n        touched: {\n          ...state.touched,\n          [action.payload.fieldId]: true,\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nconst EMPTY_OBJ = {};\n\nconst useForm = ({\n  initialValues,\n  initialErrors,\n  initialLayouts,\n  initialFields,\n  onSubmit,\n  onAction,\n  validate,\n  reduceChanges,\n  shouldScrollToErrors,\n  shoudlValidateOnBlur,\n}) => {\n  const [state, dispatch] = useReducer(reducer, {\n    values: initialValues,\n    errors: initialErrors,\n    layouts: initialLayouts,\n    fields: initialFields,\n    touched: {},\n    submitCount: 0,\n  });\n  const { submitCount, ...restState } = state;\n  const fieldIdToEl = useRef({});\n  const shouldValidateOnBlurRef = useRef(shoudlValidateOnBlur);\n  const onSubmitRef = useRef(onSubmit);\n  const onActionRef = useRef(onAction);\n  const reduceChangesRef = useRef(reduceChanges);\n  const validateRef = useRef(validate);\n  const stateRef = useRef(state);\n  shouldValidateOnBlurRef.current = shoudlValidateOnBlur;\n  onSubmitRef.current = onSubmit;\n  onActionRef.current = onAction;\n  reduceChangesRef.current = reduceChanges;\n  stateRef.current = state;\n  validateRef.current = validate;\n\n  const validationPromise = useRef<(Promise<any> & { ignore?: boolean }) | null>(null);\n\n  const scrollToError = useCallback((errors = stateRef.current.errors) => {\n    const errorFieldId = _keys(errors)[0];\n    const fieldElement = fieldIdToEl.current[errorFieldId];\n    if (fieldElement && fieldElement.scrollIntoView) {\n      fieldElement.scrollIntoView();\n    }\n  }, []);\n\n  const handleValidation = useCallback((onErrorsFetch) => {\n    if (validationPromise.current) {\n      validationPromise.current.ignore = true;\n    }\n    const errorsPromise = (Promise.resolve(validateRef.current(stateRef.current)) as unknown) as Promise<any> & {\n      ignore?: boolean;\n    };\n    validationPromise.current = errorsPromise;\n    dispatch({ type: 'SET_LOADING', payload: true });\n    errorsPromise\n      .then((errors) => {\n        if (errorsPromise.ignore) {\n          return;\n        }\n        onErrorsFetch(errors);\n      })\n      .catch(() => {\n        if (errorsPromise.ignore) {\n          return;\n        }\n        dispatch({ type: 'SET_LOADING', payload: false });\n      });\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (validateRef.current) {\n      handleValidation((errors) => {\n        if (errors) {\n          dispatch({ type: 'SUBMIT', payload: { errors } });\n          if (shouldScrollToErrors) {\n            scrollToError(errors);\n          }\n        } else {\n          dispatch({ type: 'SUBMIT', payload: { errors: {} } });\n          onSubmit(restState);\n        }\n      });\n    }\n  }, []);\n  const handleAction = useCallback((action) => {\n    switch (action.type) {\n      case FORM_CHANGE_ACTION: {\n        if (reduceChanges) {\n          dispatch({\n            type: 'RESET',\n            payload: reduceChangesRef.current(\n              stateRef.current,\n              reduceFormChangeAction(stateRef.current, action),\n              action\n            ),\n          });\n        } else {\n          dispatch(action);\n        }\n        break;\n      }\n      case MARK_FORM_FIELD_TOUCHED_ACTION: {\n        dispatch(action);\n        break;\n      }\n      case REGISTER_FORM_FIELD_ACTION: {\n        fieldIdToEl.current[action.payload.fieldId] = action.payload.el;\n        break;\n      }\n      default: {\n        return onActionRef.current(action);\n      }\n    }\n  }, []);\n  const reset = useCallback((nextState) => {\n    dispatch({\n      type: 'RESET',\n      payload: nextState,\n    });\n  }, []);\n\n  useEffect(() => {\n    if (validateRef.current) {\n      const touchedFieldIds = _keys(stateRef.current.touched);\n      if (submitCount || (touchedFieldIds.length && shouldValidateOnBlurRef.current)) {\n        handleValidation((errors) => {\n          dispatch({\n            type: 'UPDATE_ERRORS',\n            payload: submitCount ? errors || EMPTY_OBJ : _pick(errors, touchedFieldIds),\n          });\n        });\n      }\n    }\n  }, [restState.values, restState.touched, submitCount]);\n\n  return { ...restState, handleSubmit, handleAction, scrollToError, reset };\n};\n\nexport { useForm };\n","export const FORM_CHANGE_ACTION = '@@form/change';\nexport const REGISTER_FORM_FIELD_ACTION = '@@form/register-field';\nexport const MARK_FORM_FIELD_TOUCHED_ACTION = '@@form/touch-field';\n","import { useCallback, useRef } from 'react';\nimport { FORM_CHANGE_ACTION, MARK_FORM_FIELD_TOUCHED_ACTION, REGISTER_FORM_FIELD_ACTION } from '../actionTypes';\n\nconst useFormField = (fieldId, onAction) => {\n  const fieldIdRef = useRef(fieldId);\n  const onActionRef = useRef(onAction);\n  fieldIdRef.current = fieldId;\n  onActionRef.current = onAction;\n\n  const onChange = useCallback((value) => {\n    onActionRef.current({\n      type: FORM_CHANGE_ACTION,\n      payload: { fieldId: fieldIdRef.current, value },\n    });\n  }, []);\n\n  const onBlur = useCallback(() => {\n    onActionRef.current({\n      type: MARK_FORM_FIELD_TOUCHED_ACTION,\n      payload: { fieldId: fieldIdRef.current },\n    });\n  }, []);\n\n  const ref = useCallback((el) => {\n    onActionRef.current({\n      type: REGISTER_FORM_FIELD_ACTION,\n      payload: { fieldId: fieldIdRef.current, el },\n    });\n  }, []);\n\n  return [ref, onBlur, onChange];\n};\n\nexport { useFormField };\n","import React, { useCallback } from 'react';\n\nimport {\n  LayoutsBuilder,\n  LayoutBuilder,\n  RowBuilder,\n  ColumnBuilder,\n  FieldBuilder,\n  OnActionInterface,\n  Fields,\n  LayoutInterface,\n  Form,\n  useForm,\n  useFormField,\n} from 'react-entity-form';\n\ninterface TextInputProps<F> {\n  value: string;\n  onAction: OnActionInterface<string, F>;\n\n  fieldId: F;\n  label: string;\n  className: string;\n}\n\nconst TextInput = <F extends string>({ value = '', onAction, className, fieldId, label }: TextInputProps<F>) => {\n  const [ref, onBlur, onValueChange] = useFormField(fieldId, onAction);\n  const onChange = useCallback(\n    (e) => {\n      onValueChange(e.target.value);\n    },\n    [onValueChange]\n  );\n\n  return (\n    <div className={`${className || ''} flex flex-col`} ref={ref}>\n      <label className=\"block flex-none\" htmlFor={fieldId}>\n        {label}\n      </label>\n      <input\n        onBlur={onBlur}\n        id={fieldId}\n        placeholder={label}\n        className=\"w-full block flex-1\"\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\ninterface TextAreaInputProps<F> {\n  value: string;\n  onAction: OnActionInterface<string, F>;\n\n  fieldId: F;\n  label: string;\n  className: string;\n}\n\nfunction TextAreaInput<F extends string>({\n  value = '',\n  onAction,\n  className,\n  fieldId,\n  label,\n}: TextAreaInputProps<F>): React.ReactElement {\n  const [ref, onBlur, onValueChange] = useFormField(fieldId, onAction);\n  const onChange = useCallback(\n    (e) => {\n      onValueChange(e.target.value);\n    },\n    [onValueChange]\n  );\n\n  return (\n    <div ref={ref} className={`${className || ''} flex flex-col`}>\n      <label className=\"block flex-none\" htmlFor={fieldId}>\n        {label}\n      </label>\n      <textarea\n        onBlur={onBlur}\n        id={fieldId}\n        placeholder={label}\n        className=\"w-full block flex-1\"\n        value={value}\n        onChange={onChange}\n        rows={3}\n      />\n    </div>\n  );\n}\n\nconst FIELDS: Fields = {\n  firstname: new FieldBuilder<string, 'firstname', TextInputProps<'firstname'>>({\n    fieldId: 'firstname' as const,\n    isHidden: false,\n    componentProps: { className: '', label: 'First name' },\n    FieldComponent: TextInput,\n  }).build(),\n  lastname: new FieldBuilder<string, 'lastname', TextInputProps<'lastname'>>({\n    fieldId: 'lastname' as const,\n    isHidden: false,\n    componentProps: { className: '', label: 'Last Name' },\n    FieldComponent: TextInput,\n  }).build(),\n  tagline: new FieldBuilder<string, 'tagline', TextInputProps<'tagline'>>({\n    fieldId: 'tagline' as const,\n    isHidden: false,\n    componentProps: { className: '', label: 'Tagline' },\n    FieldComponent: TextInput,\n  }).build(),\n  lifeMoto: new FieldBuilder<string, 'lifeMoto', TextAreaInputProps<'lifeMoto'>>({\n    fieldId: 'lifeMoto' as const,\n    isHidden: false,\n    componentProps: { className: '', label: 'Life Moto' },\n    FieldComponent: TextAreaInput,\n  }).build(),\n  address1: new FieldBuilder<string, 'address1', TextInputProps<'address1'>>({\n    fieldId: 'address1' as const,\n    isHidden: false,\n    componentProps: { className: '', label: 'Address line 1' },\n    FieldComponent: TextInput,\n  }).build(),\n  address2: new FieldBuilder<string, 'address2', TextInputProps<'address2'>>({\n    fieldId: 'address2' as const,\n    isHidden: false,\n    componentProps: { className: '', label: 'Address line 2' },\n    FieldComponent: TextInput,\n  }).build(),\n  pincode: new FieldBuilder<string, 'pincode', TextInputProps<'pincode'>>({\n    fieldId: 'pincode' as const,\n    isHidden: false,\n    componentProps: { className: '', label: 'Pincode' },\n    FieldComponent: TextInput,\n  }).build(),\n} as const;\n\nconst LAYOUTS: LayoutInterface[] = new LayoutsBuilder()\n  .addLayout(\n    new LayoutBuilder()\n      .addRow(\n        new RowBuilder()\n          .addColumn('firstname' as const)\n          .addColumn('lastname' as const)\n          .build()\n      )\n      .addRow('tagline' as const)\n      .addRow(\n        new RowBuilder()\n          .addColumn('lifeMoto' as const)\n          .addColumn(\n            new ColumnBuilder()\n              .addRow('address1' as const)\n              .addRow('address2' as const)\n              .addRow('pincode' as const)\n              .build()\n          )\n          .build()\n      )\n      .build()\n  )\n  .build();\n\nconst BasicForm = () => {\n  // @ts-ignore\n  const { handleAction, errors, values, touched } = useForm({\n    initialErrors: {},\n    initialValues: {},\n  });\n\n  return <Form fields={FIELDS} layouts={LAYOUTS} values={values} errors={errors} onAction={handleAction} />;\n};\n\nexport { BasicForm };\n","import React from 'react';\n\nimport { BasicForm } from './examples/Basic';\nimport 'react-entity-form/dist/index.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Hello React Entity Form</h1>\n      <BasicForm />\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}