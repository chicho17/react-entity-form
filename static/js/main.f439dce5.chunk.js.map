{"version":3,"sources":["../../src/builders/LayoutsBuilder.ts","../../src/builders/LayoutBuilder.ts","../../src/builders/RowBuilder.ts","../../src/builders/ColumnBuilder.ts","../../src/builders/FieldBuilder.ts","../../src/components/helper.ts","../../src/components/Row.tsx","../../src/components/Layout.tsx","../../src/components/Form.tsx","examples/Basic.tsx","App.js","index.js"],"names":["constructor","layouts","layoutsArr","layoutIdToArrIndex","this","Map","layout","concat","length","layoutIndex","get","slice","idGenerator","id","makeIdGenerator","rows","isHidden","additional","row","columns","column","Null","field","FieldComponent","componentProps","fieldId","getUnitId","unit","makeGetter","fieldIds","getFieldIds","lookFor","item","createSelector","_property","items","res","getSelectorsAndUnits","unitList","unitId","valuesGetter","fieldsGetter","errorsGetter","selectors","units","makeMetaSelector","prevSelectors","prevUnits","changedUnitList","unChangedUnitList","addedUnitList","unChangedUnitIds","_pick","Row","className","unitKey","getMetaSelector","useRef","columnToGetters","useMemo","fields","value","values","error","errors","onAction","s","col","colId","key","Layout","rowToGetters","React","rowId","Form","handleSubmission","useCallback","e","layoutToGetters","onSubmit","TextInput","label","onChange","type","payload","target","htmlFor","placeholder","FIELDS","firstname","FieldBuilder","build","lastname","tagline","lifeMoto","address1","address2","pincode","LAYOUTS","LayoutsBuilder","addLayout","LayoutBuilder","addRow","RowBuilder","addColumn","ColumnBuilder","BasicForm","useState","setValues","action","prev","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f439dce5.chunk.js","sourcesContent":["import { LayoutInterface } from '../types';\n\nclass LayoutsBuilder {\n  layoutsArr: LayoutInterface[] = [];\n  layoutIdToArrIndex = new Map<string, number>();\n\n  constructor(layouts: LayoutInterface[] = []) {\n    this.layoutsArr = layouts;\n    this.layoutIdToArrIndex = new Map(layouts.map((layout, index) => [layout.id, index]));\n  }\n\n  addLayout(layout: LayoutInterface) {\n    this.layoutsArr = this.layoutsArr.concat([layout]);\n    this.layoutIdToArrIndex.set(layout.id, this.layoutsArr.length - 1);\n    return this;\n  }\n\n  removeLayout(layoutId: LayoutInterface['id']) {\n    const layoutIndex = this.layoutIdToArrIndex.get(layoutId);\n    if (layoutIndex == null) {\n      return this;\n    }\n    this.layoutsArr = [...this.layoutsArr.slice(0, layoutIndex), ...this.layoutsArr.slice(layoutIndex + 1)];\n    this.layoutIdToArrIndex.delete(layoutId);\n    return this;\n  }\n\n  updateLayout(layout: LayoutInterface) {\n    const layoutIndex = this.layoutIdToArrIndex.get(layout.id);\n    if (layoutIndex == null) {\n      return this;\n    }\n    this.layoutsArr = [...this.layoutsArr.slice(0, layoutIndex), layout, ...this.layoutsArr.slice(layoutIndex + 1)];\n    return this;\n  }\n\n  build(): LayoutInterface[] {\n    return this.layoutsArr;\n  }\n}\n\nexport { LayoutsBuilder };\n","import { RowInterface, LayoutInterface } from '../types';\n\nfunction makeIdGenerator() {\n  let id = 1;\n  return function generateId() {\n    return `${id++}`;\n  };\n}\n\nconst idGenerator = makeIdGenerator();\n\nclass LayoutBuilder {\n  rows: RowInterface[] = [];\n  id = idGenerator();\n  isHidden = false;\n  additional: any = undefined;\n\n  constructor(layout?: LayoutInterface) {\n    if (layout) {\n      this.rows = layout.rows;\n      this.id = layout.id;\n      this.isHidden = layout.isHidden;\n      this.additional = layout.additional;\n    }\n  }\n\n  markHidden() {\n    this.isHidden = true;\n    return this;\n  }\n\n  markVisible() {\n    this.isHidden = false;\n    return this;\n  }\n\n  setAdditional(additional: any) {\n    this.additional = additional;\n    return this;\n  }\n\n  addRow(row: RowInterface) {\n    this.rows = this.rows.concat([row]);\n    return this;\n  }\n\n  build(): LayoutInterface {\n    return {\n      rows: this.rows,\n      id: this.id,\n      isHidden: this.isHidden,\n      additional: this.additional,\n    };\n  }\n}\n\nexport { LayoutBuilder };\n","import { RowObjectInterface, ColumnInterface } from '../types';\n\nfunction makeIdGenerator() {\n  let id = 1;\n  return function generateId() {\n    return `${id++}`;\n  };\n}\n\nconst idGenerator = makeIdGenerator();\n\nclass RowBuilder {\n  columns: ColumnInterface[] = [];\n  id = idGenerator();\n  isHidden = false;\n  additional: any = undefined;\n\n  constructor(row?: RowObjectInterface) {\n    if (row) {\n      this.columns = row.columns;\n      this.id = row.id;\n      this.isHidden = row.isHidden;\n      this.additional = row.additional;\n    }\n    return this;\n  }\n\n  markHidden() {\n    this.isHidden = true;\n    return this;\n  }\n\n  markVisible() {\n    this.isHidden = false;\n    return this;\n  }\n\n  setAdditional(additional: any) {\n    this.additional = additional;\n    return this;\n  }\n\n  addColumn(column: ColumnInterface) {\n    this.columns = this.columns.concat([column]);\n    return this;\n  }\n\n  build(): RowObjectInterface {\n    return {\n      id: this.id,\n      columns: this.columns,\n      isHidden: this.isHidden,\n      additional: this.additional,\n    };\n  }\n}\n\nexport { RowBuilder };\n","import { ColumnObjectInterface, RowInterface } from '../types';\n\nfunction makeIdGenerator() {\n  let id = 1;\n  return function generateId() {\n    return `${id++}`;\n  };\n}\n\nconst idGenerator = makeIdGenerator();\n\nclass ColumnBuilder {\n  rows: RowInterface[] = [];\n  id = idGenerator();\n  isHidden = false;\n  additional: any = undefined;\n\n  constructor(column?: ColumnObjectInterface) {\n    if (column) {\n      this.rows = column.rows;\n      this.id = column.id;\n      this.isHidden = column.isHidden;\n      this.additional = column.additional;\n    }\n    return this;\n  }\n\n  markHidden() {\n    this.isHidden = true;\n    return this;\n  }\n\n  markVisible() {\n    this.isHidden = false;\n    return this;\n  }\n\n  setAdditional(additional: any) {\n    this.additional = additional;\n    return this;\n  }\n\n  addRow(row: RowInterface) {\n    this.rows = this.rows.concat([row]);\n    return this;\n  }\n\n  build(): ColumnObjectInterface {\n    return {\n      id: this.id,\n      rows: this.rows,\n      isHidden: this.isHidden,\n      additional: this.additional,\n    };\n  }\n}\n\nexport { ColumnBuilder };\n","import { FieldComponentProps } from '../types';\n\nfunction Null() {\n  return null;\n}\n\nclass FieldBuilder<V, F, P extends FieldComponentProps<V, F>> {\n  FieldComponent: React.ComponentType<P> = Null;\n  componentProps: Omit<P, 'value' | 'onAction' | 'fieldId'> = {} as P;\n  fieldId: F;\n  isHidden: boolean = false;\n\n  constructor(field?: {\n    FieldComponent: React.ComponentType<P>;\n    componentProps: Omit<P, 'value' | 'onAction' | 'fieldId'>;\n    isHidden: boolean;\n    fieldId: F;\n  }) {\n    if (field) {\n      this.FieldComponent = field.FieldComponent;\n      this.componentProps = field.componentProps;\n      this.isHidden = field.isHidden;\n      this.fieldId = field.fieldId;\n    }\n  }\n\n  setFieldComponent(Component: React.ComponentType<P & { value: V }>) {\n    this.FieldComponent = Component;\n  }\n\n  setComponentProps(componentProps: Omit<P, 'value' | 'onAction' | 'fieldId'>) {\n    this.componentProps = componentProps;\n  }\n\n  build(): {\n    FieldComponent: React.ComponentType<P>;\n    componentProps: Omit<P, 'value' | 'onAction' | 'fieldId'>;\n    isHidden: boolean;\n    fieldId: F;\n  } {\n    return {\n      FieldComponent: this.FieldComponent,\n      componentProps: this.componentProps,\n      isHidden: this.isHidden,\n      fieldId: this.fieldId,\n    };\n  }\n}\n\nexport { FieldBuilder };\n","import { createSelector } from 'reselect';\nimport _property from 'lodash/property';\nimport _pick from 'lodash/pick';\n\nimport { Fields, Values, Errors } from '../types';\n\ninterface UnitItem {\n  id: string;\n}\n\ntype UnitInterface = string | UnitItem;\n\nfunction getUnitId(unit: UnitInterface) {\n  return typeof unit === 'string' ? unit : unit.id;\n}\n\nexport function getFieldIds<U extends UnitInterface>(unit: U, lookFor: 'columns' | 'rows' = 'rows'): string[] {\n  if (typeof unit === 'string') {\n    return [unit];\n  }\n  return unit[lookFor].flatMap((item: UnitInterface) =>\n    typeof item === 'string' ? item : getFieldIds(item, lookFor === 'rows' ? 'columns' : 'rows')\n  );\n}\n\nfunction makeGetter<U extends UnitInterface>(unit: U, lookFor: 'columns' | 'rows') {\n  const fieldIds = getFieldIds(unit, lookFor);\n  return createSelector(\n    fieldIds.map((fieldId: string) => _property<Dict<U>, U>(fieldId)),\n    (...items) => {\n      return items.reduce((res, item, index) => {\n        res[fieldIds[index]] = item;\n        return res;\n      }, {});\n    }\n  );\n}\n\nfunction getSelectorsAndUnits<T extends UnitInterface>(unitList: T[], lookFor: 'columns' | 'rows') {\n  return unitList.reduce(\n    (res, unit) => {\n      const unitId = getUnitId(unit);\n      res.selectors[unitId] = {\n        valuesGetter: makeGetter(unit, lookFor),\n        fieldsGetter: makeGetter(unit, lookFor),\n        errorsGetter: makeGetter(unit, lookFor),\n      };\n      res.units[unitId] = unit;\n      return res;\n    },\n    { selectors: {}, units: {} }\n  );\n}\n\ninterface Dict<T> {\n  [k: string]: T;\n}\n\ninterface Getter<T> {\n  (dict: T): T;\n}\n\ninterface Selectors {\n  valuesGetter: Getter<Values>;\n  fieldsGetter: Getter<Fields>;\n  errorsGetter: Getter<Errors>;\n}\n\nexport const makeMetaSelector = (lookFor: 'columns' | 'rows') => {\n  let prevSelectors: Dict<Selectors> = {};\n  let prevUnits: Dict<unknown> = {};\n  return function getMetaSelectors<T extends UnitInterface>(unitList: T[]) {\n    if (prevUnits == null) {\n      const { selectors, units } = getSelectorsAndUnits(unitList, lookFor);\n      prevSelectors = selectors;\n      prevUnits = units;\n      return prevSelectors;\n    }\n\n    const changedUnitList = unitList.filter(\n      (unit) => prevUnits[getUnitId(unit)] && prevUnits[getUnitId(unit)] !== unit\n    );\n    const unChangedUnitList = unitList.filter(\n      (unit) => prevUnits[getUnitId(unit)] && prevUnits[getUnitId(unit)] === unit\n    );\n    const addedUnitList = unitList.filter((unit) => !prevUnits[getUnitId(unit)]);\n    const { selectors, units } = getSelectorsAndUnits([...changedUnitList, ...addedUnitList], lookFor);\n    const unChangedUnitIds = unChangedUnitList.map((unit) => getUnitId(unit));\n    prevSelectors = {\n      ..._pick(prevSelectors, unChangedUnitIds),\n      ...selectors,\n    };\n    prevUnits = {\n      ..._pick(prevUnits, unChangedUnitIds),\n      ...units,\n    };\n\n    return prevSelectors;\n  };\n};\n","import React, { useRef, useMemo } from 'react';\nimport { makeMetaSelector } from './helper';\n\nimport { RowInterface, ColumnInterface, Values, Errors, Fields, OnActionInterface } from '../types';\n\nimport s from '../styles.module.css';\n\nexport interface RowProps {\n  values: Values;\n  errors: Errors;\n  fields: Fields;\n  row: RowInterface | ColumnInterface;\n  onAction: OnActionInterface<any, string>;\n  className?: string;\n  unitKey?: 'columns' | 'rows';\n}\n\nconst Row = ({ values, errors, fields, row, onAction, className = '', unitKey = 'columns' }: RowProps) => {\n  const getMetaSelector = useRef(makeMetaSelector(unitKey === 'columns' ? 'rows' : 'columns'));\n  const unit = row[unitKey];\n  const columnToGetters = useMemo(() => {\n    return unit == null ? {} : getMetaSelector.current(unit);\n  }, [unit]);\n\n  if (typeof row === 'string') {\n    if (fields[row].isHidden) {\n      return null;\n    }\n\n    const field = fields[row];\n    const value = values[row];\n    const error = errors[row];\n    const { FieldComponent, componentProps, fieldId } = field;\n\n    return (\n      <FieldComponent\n        {...componentProps}\n        onAction={onAction}\n        className={className}\n        value={value}\n        error={error}\n        fieldId={fieldId}\n      />\n    );\n  }\n\n  return (\n    <div className={`${s.flex} ${unitKey === 'columns' ? s.flexRow : s.flexCol} ${className || ''}`}>\n      {unit.map((col: ColumnInterface | RowInterface) => {\n        const colId = typeof col === 'string' ? col : col.id;\n        return (\n          <Row\n            key={colId}\n            row={col}\n            values={columnToGetters[colId].valuesGetter(values)}\n            errors={columnToGetters[colId].errorsGetter(errors)}\n            fields={columnToGetters[colId].fieldsGetter(fields)}\n            unitKey={unitKey === 'rows' ? 'columns' : 'rows'}\n            onAction={onAction}\n            className={s.flex1}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport { Row };\n","import React, { useMemo, useRef } from 'react';\n\nimport { Row } from './Row';\nimport { makeMetaSelector } from './helper';\n\nimport { RowInterface, Values, Errors, Fields, LayoutInterface, OnActionInterface } from '../types';\n\nexport interface LayoutProps {\n  values: Values;\n  errors: Errors;\n  fields: Fields;\n  layout: LayoutInterface;\n  onAction: OnActionInterface<any, string>;\n}\n\nconst Layout = ({ values, errors, fields, layout, onAction }: LayoutProps) => {\n  const getMetaSelector = useRef(makeMetaSelector('columns'));\n  const rowToGetters = useMemo(() => {\n    return getMetaSelector.current(layout.rows);\n  }, [layout.rows]);\n\n  return (\n    <React.Fragment>\n      {layout.rows.map((row: RowInterface) => {\n        const rowId = typeof row === 'string' ? row : row.id;\n        return (\n          <Row\n            key={rowId}\n            row={row}\n            fields={rowToGetters[rowId].fieldsGetter(fields)}\n            values={rowToGetters[rowId].valuesGetter(values)}\n            errors={rowToGetters[rowId].errorsGetter(errors)}\n            onAction={onAction}\n          />\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\nexport { Layout };\n","import React, { useCallback, useMemo, useRef } from 'react';\n\nimport { Layout } from './Layout';\nimport { makeMetaSelector } from './helper';\n\nimport { Errors, Fields, LayoutInterface, OnActionInterface, Values } from '../types';\n\nexport interface FormProps {\n  values: Values;\n  errors: Errors;\n  fields: Fields;\n  layouts: LayoutInterface[];\n  onAction: OnActionInterface<any, string>;\n}\n\nconst Form = ({ values, errors, fields, layouts, onAction }: FormProps) => {\n  const handleSubmission = useCallback((e) => {\n    e.preventDefault();\n  }, []);\n\n  const getMetaSelector = useRef(makeMetaSelector('rows'));\n  const layoutToGetters = useMemo(() => {\n    return getMetaSelector.current(layouts);\n  }, [layouts]);\n\n  return (\n    <form onSubmit={handleSubmission}>\n      {layouts.map((layout) => (\n        <Layout\n          key={layout.id}\n          layout={layout}\n          fields={layoutToGetters[layout.id].fieldsGetter(fields)}\n          values={layoutToGetters[layout.id].valuesGetter(values)}\n          errors={layoutToGetters[layout.id].errorsGetter(errors)}\n          onAction={onAction}\n        />\n      ))}\n    </form>\n  );\n};\n\nexport { Form };\n","import React, { useCallback } from 'react';\n\nimport {\n  LayoutsBuilder,\n  LayoutBuilder,\n  RowBuilder,\n  ColumnBuilder,\n  FieldBuilder,\n  OnActionInterface,\n  Fields,\n  LayoutInterface,\n  Form,\n} from 'react-entity-form';\n\ninterface TextInputProps<F> {\n  value: string;\n  onAction: OnActionInterface<string, F>;\n\n  fieldId: F;\n  label: string;\n  className: string;\n}\n\nconst TextInput = <F extends string>({ value = '', onAction, className, fieldId, label }: TextInputProps<F>) => {\n  const onChange = useCallback(\n    (e) => {\n      onAction({\n        type: '@@form/change',\n        payload: {\n          fieldId,\n          value: e.target.value,\n        },\n      });\n    },\n    [onAction, fieldId]\n  );\n\n  return (\n    <div className={`${className || ''} flex flex-col`}>\n      <label className=\"block flex-none\" htmlFor={fieldId}>\n        {label}\n      </label>\n      <input\n        id={fieldId}\n        placeholder={label}\n        className=\"w-full block flex-1\"\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\ninterface TextAreaInputProps<F> {\n  value: string;\n  onAction: OnActionInterface<string, F>;\n\n  fieldId: F;\n  label: string;\n  className: string;\n}\n\nfunction TextAreaInput<F extends string>({\n  value = '',\n  onAction,\n  className,\n  fieldId,\n  label,\n}: TextAreaInputProps<F>): React.ReactElement {\n  const onChange = useCallback(\n    (e) => {\n      onAction({\n        type: '@@form/change',\n        payload: {\n          fieldId,\n          value: e.target.value,\n        },\n      });\n    },\n    [onAction, fieldId]\n  );\n\n  return (\n    <div className={`${className || ''} flex flex-col`}>\n      <label className=\"block flex-none\" htmlFor={fieldId}>\n        {label}\n      </label>\n      <textarea\n        id={fieldId}\n        placeholder={label}\n        className=\"w-full block flex-1\"\n        value={value}\n        onChange={onChange}\n        rows={3}\n      />\n    </div>\n  );\n}\n\nconst FIELDS: Fields = {\n  firstname: new FieldBuilder<string, 'firstname', TextInputProps<'firstname'>>({\n    fieldId: 'firstname' as const,\n    isHidden: false,\n    componentProps: { className: '', label: 'First name' },\n    FieldComponent: TextInput,\n  }).build(),\n  lastname: new FieldBuilder<string, 'lastname', TextInputProps<'lastname'>>({\n    fieldId: 'lastname' as const,\n    isHidden: false,\n    componentProps: { className: '', label: 'Last Name' },\n    FieldComponent: TextInput,\n  }).build(),\n  tagline: new FieldBuilder<string, 'tagline', TextInputProps<'tagline'>>({\n    fieldId: 'tagline' as const,\n    isHidden: false,\n    componentProps: { className: '', label: 'Tagline' },\n    FieldComponent: TextInput,\n  }).build(),\n  lifeMoto: new FieldBuilder<string, 'lifeMoto', TextAreaInputProps<'lifeMoto'>>({\n    fieldId: 'lifeMoto' as const,\n    isHidden: false,\n    componentProps: { className: '', label: 'Life Moto' },\n    FieldComponent: TextAreaInput,\n  }).build(),\n  address1: new FieldBuilder<string, 'address1', TextInputProps<'address1'>>({\n    fieldId: 'address1' as const,\n    isHidden: false,\n    componentProps: { className: '', label: 'Address line 1' },\n    FieldComponent: TextInput,\n  }).build(),\n  address2: new FieldBuilder<string, 'address2', TextInputProps<'address2'>>({\n    fieldId: 'address2' as const,\n    isHidden: false,\n    componentProps: { className: '', label: 'Address line 2' },\n    FieldComponent: TextInput,\n  }).build(),\n  pincode: new FieldBuilder<string, 'pincode', TextInputProps<'pincode'>>({\n    fieldId: 'pincode' as const,\n    isHidden: false,\n    componentProps: { className: '', label: 'Pincode' },\n    FieldComponent: TextInput,\n  }).build(),\n} as const;\n\nconst LAYOUTS: LayoutInterface[] = new LayoutsBuilder()\n  .addLayout(\n    new LayoutBuilder()\n      .addRow(\n        new RowBuilder()\n          .addColumn('firstname' as const)\n          .addColumn('lastname' as const)\n          .build()\n      )\n      .addRow('tagline' as const)\n      .addRow(\n        new RowBuilder()\n          .addColumn('lifeMoto' as const)\n          .addColumn(\n            new ColumnBuilder()\n              .addRow('address1' as const)\n              .addRow('address2' as const)\n              .addRow('pincode' as const)\n              .build()\n          )\n          .build()\n      )\n      .build()\n  )\n  .build();\n\nconst BasicForm = () => {\n  const [values, setValues] = React.useState({});\n  const errors = {};\n  const onAction = React.useCallback(\n    (action) => {\n      setValues((prev) => ({\n        ...prev,\n        [action.payload.fieldId]: action.payload.value,\n      }));\n    },\n    [setValues]\n  );\n  return <Form fields={FIELDS} layouts={LAYOUTS} values={values} errors={errors} onAction={onAction} />;\n};\n\nexport { BasicForm };\n","import React from 'react';\n\nimport { BasicForm } from './examples/Basic';\nimport 'react-entity-form/dist/index.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Hello React Entity Form</h1>\n      <BasicForm />\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}